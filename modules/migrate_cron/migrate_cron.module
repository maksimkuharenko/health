<?php

/**
 * @file
 * Contains migate_manager.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\migrate\Plugin\Migration;
use Drupal\Core\Database\Database;
use Drupal\search_api\Entity\Index;

/**
 * Implements hook_help().
 */
function migrate_cron_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the migate_manager module.
    case 'help.page.migrate_cron':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Run migrations at cron') . '</p>';
      return $output;

    default:
  }
}


/**
 * Implements hook_cron().
 */
function migrate_cron_cron() {

  $config = \Drupal::config('migrate_cron.settings');

  /** @var \Drupal\migrate\Plugin\MigrationPluginManager $service */
  $service = \Drupal::service('plugin.manager.migration');
  $migrations = $service->getDefinitions();
  if ($migrations) {
    //$migrate_last_imported_store = \Drupal::keyValue('migrate_last_imported');
    $current_time = \Drupal::time()->getRequestTime();

    foreach ($migrations as $migration) {
      $migrationId = $migration['id'];
      if ($cron = $config->get("{$migrationId}_cron")) {

        $last_run = \Drupal::state()->get('migrate_cron.last_run.' . $migrationId, 0);

        /** @var \Drupal\migrate\Plugin\Migration $migrate */
        $migrate = $service->createInstance($migrationId);
        $interval = $config->get("{$migrationId}_interval") ? $config->get("{$migrationId}_interval") : 0;
        if (($current_time - $last_run) >= $interval) {
          if ($migrate->getStatus() != \Drupal\migrate\Plugin\MigrationInterface::STATUS_IDLE) {
            $migrate->setStatus(\Drupal\migrate\Plugin\MigrationInterface::STATUS_IDLE);
          }
          \Drupal::state()->set('migrate_cron.last_run.' . $migrationId, $current_time);
          $migrate->setTrackLastImported(TRUE);
          $migrate->getIdMap()->prepareUpdate();
          $executable = new \Drupal\migrate\MigrateExecutable($migrate, new \Drupal\migrate\MigrateMessage());
          $executable->import();
          //$migrate_last_imported_store->set($migrate->id(), round(microtime(TRUE) * 1000));
          $reindex = TRUE;
        }
      }
    }
  }
}
